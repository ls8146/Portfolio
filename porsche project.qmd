---
title: "Porsche Project"
author: "Levi Sayles"
format: html
editor: visual
---

## Running Code

Loading the Libraries

```{r}
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(readr)
library(tidyverse)
library(scales)
```

Loading the data and performing necessary cleaning

```{r}
# Load the data
data <- read_csv("https://myxavier-my.sharepoint.com/:x:/g/personal/saylesl_xavier_edu/EaL989pm6tpCsPk6IMesXMwBAjbs0OQJny5jrX1U3DIxQQ?download=1")

# Convert columns that might have mixed data types to numeric, handling errors and non-string data gracefully
clean_numeric_column <- function(column) {
  # Remove all non-numeric characters except "." and "-"
  clean_column <- gsub("[^0-9.-]", "", as.character(column))
  # Convert to numeric
  return(as.numeric(clean_column))
}

# Define columns to clean
columns_to_convert <- c('acceleration_0-100km/h', 'power', 'torque', 
                        'engine_displacement', 'weight-to-power_ratio', 
                        'weight-to-torque_ratio', 'maximum_speed')

# Apply the cleaning function to relevant columns
data <- data %>%
  mutate(across(all_of(columns_to_convert), clean_numeric_column))

# Check for remaining NA values after coercion
colSums(is.na(data[columns_to_convert]))

# Drop rows with missing essential values for the graphs
data_cleaned <- data %>%
  drop_na(`acceleration_0-100km/h`, power, torque, engine_displacement, `weight-to-power_ratio`)

# Overview of cleaned data
summary(data_cleaned)
```

# Graph 1:

This scatter plot shows the relationship between power and torque for different fuel types. Each point represents a car, and the colors indicate different fuel types. The regression lines are added to visualize the trend for each fuel type.

```{r}

ggplot(data_cleaned, aes(x = torque / 10000, y = power / 10000)) +
  geom_point(size = 3, alpha = 0.7) +
  geom_smooth(method = "lm", se = FALSE) +
  labs(title = "Power vs. Torque",
       x = "Torque (kNm)",  # Adjusted the unit
       y = "Power (kHP)",   # Adjusted the unit
       color = "Fuel Type") +
  scale_x_continuous(labels = scales::comma) +  # Ensures proper number format
  scale_y_continuous(labels = scales::comma) +  # Ensures proper number format
  theme_minimal()
```

\+

# Graph 2:

This histogram with a density curve illustrates the distribution of acceleration times (0-100 km/h). The density curve provides a smoothed representation of the distribution.

```{r}
ggplot(data_cleaned, aes(x = `acceleration_0-100km/h`)) +
  geom_histogram(aes(y = ..density..), bins = 15, fill = "skyblue", color = "black", alpha = 0.7) +
  geom_density(color = "purple", size = 1) +
  labs(title = "Distribution of Acceleration (0-100 km/h)",
       x = "Acceleration 0-100 km/h (seconds)",
       y = "Density") +
  theme_bw()
```

# Graph 3:

This boxplot compares the distribution of engine displacement and power across different generations of the Porsche 911. It shows the median, quartiles, and potential outliers for each generation, allowing us to observe how these metrics vary over time.

```{r}
data_cleaned <- data_cleaned %>%
  mutate(power = power / 10000)

ggplot(data_cleaned, aes(x = generation, y = power, fill = generation)) +
  geom_boxplot() +
  labs(title = "Engine Displacement vs. Power by Generation",
       x = "Generation",
       y = "Power (HP)",
       fill = "Generation") +
  scale_y_continuous(labels = comma) +  # Format y-axis with actual numbers (no scientific notation)
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

# Graph 4:

This bar plot shows the weight-to-power ratio for different body types of the Porsche 911. The weight-to-power ratio is an important metric for understanding the performance of a vehicle, and this plot allows for easy comparison between body types.

```{r}
avg_hp_data <- data_cleaned %>%
  group_by(generation) %>%
  summarise(avg_power = mean(power, na.rm = TRUE))  # Calculate average HP

# Plot the average horsepower per generation using geom_col()
ggplot(avg_hp_data, aes(x = generation, y = avg_power, fill = generation)) +
  geom_col(color = "black", alpha = 0.7) +  # Use geom_col() for bar plot with pre-summarized data
  labs(title = "Average Horsepower (HP) by Generation",
       x = "Generation",
       y = "Average Power (HP)",
       fill = "Generation") +
  scale_y_continuous(labels = comma) +  # Format y-axis with commas
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

# Graph 5:

This scatter plot shows the relationship between maximum speed and engine displacement. A smoothing line is added to help visualize the trend. This graph can help us understand how engine size affects the top speed of the Porsche 911 models.

```{r}
ggplot(data_cleaned, aes(x = engine_displacement, y = maximum_speed)) +
  geom_point(size = 3, color = "maroon", alpha = 0.7) +
  geom_smooth(method = "loess", color = "skyblue") +
  labs(title = "Maximum Speed vs. Engine Displacement",
       x = "Engine Displacement (cc)",
       y = "Maximum Speed (km/h)") +
  theme_bw()
```

# Graph 6:

This graph will show whether higher engine displacement necessarily leads to better acceleration times and whether different powertrain architectures (such as rear-engine, all-wheel drive, etc.) exhibit distinct performance patterns.

```{r}
data_cleaned <- data_cleaned %>%
  filter(!is.na(engine_displacement) & !is.na(`acceleration_0-100km/h`))

# Plot engine displacement vs acceleration by powertrain architecture
ggplot(data_cleaned, aes(x = engine_displacement, y = `acceleration_0-100km/h`, color = powertrain_architectur)) +
  geom_point(alpha = 0.6, size = 3) +  # Plot points with some transparency and size
  geom_smooth(method = "lm", se = FALSE) +  # Add a trend line (linear model) to see correlation
  labs(title = "Engine Displacement vs. Acceleration by Powertrain Architecture",
       x = "Engine Displacement (cc)",
       y = "Acceleration (0-100 km/h in seconds)",
       color = "Powertrain Architecture") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

# Linear Regression Practice:

### 1 - Cleaning:

```{r}
library(tidyverse)
# Extract the numerical values from 'weight-to-power_ratio' and create a new column
data <- data %>%
  mutate(power_weight_kg_HP = str_extract(`weight-to-power_ratio`, "\\d+\\.?\\d*") %>% as.numeric())

# View the first few rows of the updated dataset
head(data %>% select(`weight-to-power_ratio`, power_weight_kg_HP))

# Function to clean numeric columns by removing non-numeric characters
clean_numeric_column <- function(x) {
  as.numeric(gsub("[^0-9.]", "", x))
}

# Clean the 'power' and 'engine_displacement' columns
data$power_clean <- clean_numeric_column(data$power)
data$engine_displacement_clean <- clean_numeric_column(data$engine_displacement)
data$power_weight_kg_HP_clean <- clean_numeric_column(data$power_weight_kg_HP)
data$maximum_speed_clean <- clean_numeric_column(data$maximum_speed)
data$cylinder_bore_clean <- clean_numeric_column(data$cylinder_bore)
data$piston_stroke_clean <- clean_numeric_column(data$piston_stroke)

# Convert 'acceleration_0-100km/h' to numeric
data$`acceleration_0-100km/h` <- as.numeric(data$`acceleration_0-100km/h`)

# Remove rows with missing values
data_cleaned <- data %>%
  drop_na(`acceleration_0-100km/h`, power_clean, engine_displacement_clean, power_weight_kg_HP_clean, maximum_speed_clean, cylinder_bore_clean, piston_stroke_clean)

```

### 2 - Fit a Multiple Linear Regression Model:

```{r}
# Run the linear regression model
model <- lm(`acceleration_0-100km/h` ~ power_clean + engine_displacement_clean + power_weight_kg_HP_clean + maximum_speed_clean + cylinder_bore_clean + piston_stroke_clean, data = data_cleaned)

# Output the summary of the linear regression
summary(model)
```

### 3 - Interpretation

#### a. Coefficients Table

| **Predictor Variable**    | **Estimate** | **Std. Error** | **t-value** | **p-value**     |
|------------------|--------------|--------------|--------------|--------------|
| **Intercept**             | 66.27        | 11.06          | 5.99        | \< 0.001 \*\*\* |
| **Power**                 | -5.524e-07   | 1.903e-07      | -2.90       | 0.0099 \*\*     |
| **Engine Displacement**   | 0.00869      | 0.001799       | 4.83        | \< 0.001 \*\*\* |
| **Power to Weight Ratio** | -6.094e-06   | 2.055e-05      | -0.30       | 0.770           |
| **Maximum Speed**         | -0.01893     | 0.008362       | -2.26       | 0.0369 \*       |
| **Cylinder Bore**         | -0.5861      | 0.1230         | -4.77       | \< 0.001 \*\*\* |
| **Piston Stroke**         | -0.3504      | 0.07449        | -4.71       | \< 0.001 \*\*\* |

a\. **Estimate**:

-   Each row represents one of the predictor variables in the model. The key columns are:

    -   **Estimate**: This tells you how much the predictor affects the response variable (in this case, acceleration).

        -   The estimate for **Engine Displacement** is 0.00869. This means that for every 1 unit increase in engine displacement, the acceleration time (0-100 km/h) increases by **0.00869 seconds**, assuming all other variables are constant.

        -   The estimate for **Power** is -5.524e-07. This means that for every 1 unit increase in power, the acceleration time (0-100 km/h) decreases by **0.0000005524 seconds**, assuming all other variables are constant. Though small, this is statistically significant.

        -   The estimate for **Maximum Speed** is -0.01893. This means that for every 1 unit increase in maximum speed, the acceleration time (0-100 km/h) decreases by **0.01893 seconds**, assuming all other variables are constant.

        -   The estimate for the The **Cylinder Bore** is -0.5861. This means that for every 1 unit increase in cylinder bore, the acceleration time decreases by **0.5861 seconds**.

        -   The estimate for **Piston Stroke** is -0.3504. This indicates that for every 1 unit increase in piston stroke, the acceleration time decreases by **0.3504 seconds**.

        -   The estimate for **the Power-to-Weight Ratio** is -6.094e-06, but it is not significant (p = 0.770), indicating little impact on acceleration.

        -   The **Intercept** of 66.27 suggests that when all predictor variables are zero, the model would predict an acceleration time of **66.27 seconds**, though this is theoretical since zero values for these variables are unrealistic.

    ### b. **P-value**:

    The p-values tell us whether the predictor variables significantly affect acceleration. A p-value less than 0.05 indicates statistical significance.

    -   **Power** has a p-value of **0.0099**, meaning it significantly affects acceleration.

    -   **Engine Displacement** has a p-value of **0.000156**, so it significantly affects acceleration.

    -   **Maximum Speed** has a p-value of **0.0369**, indicating it is a statistically significant predictor.

    -   **Cylinder Bore** and **Piston Stroke** have very small p-values (both \< 0.001), showing they are strong predictors of acceleration.

    -   **Power to Weight Ratio** has a p-value of **0.770**, which is statistically insignificant.

    Thus, all variables except **the Weight Ratio** are statistically significant and affect acceleration.

    ### c. **R-Squared Value**:

    -   The **R-squared value** is **0.9752**, meaning that the model's predictors (power, engine displacement, maximum speed, cylinder bore, and piston stroke) explain 97.52% of the variation in acceleration.

    -   This indicates a very strong fit, meaning that these variables do a great job explaining the variability in acceleration times for the Porsche 911 cars.

    ### e. **Residual Standard Error (RSE)**:

    -   The **Residual Standard Error** is **0.2006**. This suggests that, on average, the actual acceleration times deviate from the predicted values by about **0.2006 seconds**.

    -   A lower RSE indicates that the model has a relatively good fit to the data.

    ### f. **F-Statistic and p-value for the Overall Model**:

    -   The **F-statistic** is **111.6**, and the p-value is **1.063e-12**. This shows that the model, as a whole, is statistically significant, meaning that the combination of predictors does a good job explaining the variability in acceleration.

    ### **Summary Interpretation**:

    -   **Significant Variables**: Look at the p-values to identify which variables significantly influence acceleration. In this case, **Engine Displacement**, **Power**, **Maximum Speed**, **Cylinder Bore**, and **Piston Stroke** are significant.

    -   **Effect Size**:

        -   Higher **engine displacement** leads to slower acceleration (positive estimate).

        -   More **power** leads to faster acceleration (negative estimate).

        -   Larger **cylinder bore** and **piston stroke** lead to faster acceleration (both negative estimates).

    -   **Model Fit**:

        -   The **R-squared** value of 0.9752 indicates that the model explains 97.52% of the variability in acceleration.

        -   The **F-statistic** confirms that the model is statistically significant overall, meaning that it effectively explains the variability in acceleration.

    By interpreting these values, you can better understand how power, engine displacement, and other factors affect acceleration times in the Porsche 911 dataset.
