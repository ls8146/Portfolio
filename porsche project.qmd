---
title: "Porsche Project"
author: "Levi Sayles"
format: html
editor: visual
---

## Running Code

Loading the Librarys

```{r}
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(readr)
library(tidyverse)
library(scales)
```

Loading the data and performing necessary cleaning

```{r}
# Load the data
data <- read_csv("https://myxavier-my.sharepoint.com/:x:/g/personal/saylesl_xavier_edu/EaL989pm6tpCsPk6IMesXMwBAjbs0OQJny5jrX1U3DIxQQ?download=1")

# Convert columns that might have mixed data types to numeric, handling errors and non-string data gracefully
clean_numeric_column <- function(column) {
  # Remove all non-numeric characters except "." and "-"
  clean_column <- gsub("[^0-9.-]", "", as.character(column))
  # Convert to numeric
  return(as.numeric(clean_column))
}

# Define columns to clean
columns_to_convert <- c('acceleration_0-100km/h', 'power', 'torque', 
                        'engine_displacement', 'weight-to-power_ratio', 
                        'weight-to-torque_ratio', 'maximum_speed')

# Apply the cleaning function to relevant columns
data <- data %>%
  mutate(across(all_of(columns_to_convert), clean_numeric_column))

# Check for remaining NA values after coercion
colSums(is.na(data[columns_to_convert]))

# Drop rows with missing essential values for the graphs
data_cleaned <- data %>%
  drop_na(`acceleration_0-100km/h`, power, torque, engine_displacement, `weight-to-power_ratio`)

# Overview of cleaned data
summary(data_cleaned)
```

# Graph 1:

This scatter plot shows the relationship between power and torque for different fuel types. Each point represents a car, and the colors indicate different fuel types. The regression lines are added to visualize the trend for each fuel type.

```{r}

ggplot(data_cleaned, aes(x = torque, y = power, color = fuel_type)) +
  geom_point(size = 3, alpha = 0.7) +
  geom_smooth(method = "lm", se = FALSE) +
  labs(title = "Power vs. Torque by Fuel Type",
       x = "Torque (Nm)",
       y = "Power (HP)",
       color = "Fuel Type") +
  theme_minimal()
```

# Graph 2:

This histogram with a density curve illustrates the distribution of acceleration times (0-100 km/h). The density curve provides a smoothed representation of the distribution.

```{r}
ggplot(data_cleaned, aes(x = `acceleration_0-100km/h`)) +
  geom_histogram(aes(y = ..density..), bins = 15, fill = "skyblue", color = "black", alpha = 0.7) +
  geom_density(color = "red", size = 1) +
  labs(title = "Distribution of Acceleration (0-100 km/h)",
       x = "Acceleration 0-100 km/h (seconds)",
       y = "Density") +
  theme_minimal()
```

# Graph 3:

This boxplot compares the distribution of engine displacement and power across different generations of the Porsche 911. It shows the median, quartiles, and potential outliers for each generation, allowing us to observe how these metrics vary over time.

```{r}
data_cleaned <- data_cleaned %>%
  mutate(power = power / 10000)

ggplot(data_cleaned, aes(x = generation, y = power, fill = generation)) +
  geom_boxplot() +
  labs(title = "Engine Displacement vs. Power by Generation",
       x = "Generation",
       y = "Power (HP)",
       fill = "Generation") +
  scale_y_continuous(labels = comma) +  # Format y-axis with actual numbers (no scientific notation)
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

# Graph 4:

This bar plot shows the weight-to-power ratio for different body types of the Porsche 911. The weight-to-power ratio is an important metric for understanding the performance of a vehicle, and this plot allows for easy comparison between body types.

```{r}
avg_hp_data <- data_cleaned %>%
  group_by(generation) %>%
  summarise(avg_power = mean(power, na.rm = TRUE))  # Calculate average HP

# Plot the average horsepower per generation using geom_col()
ggplot(avg_hp_data, aes(x = generation, y = avg_power, fill = generation)) +
  geom_col(color = "black", alpha = 0.7) +  # Use geom_col() for bar plot with pre-summarized data
  labs(title = "Average Horsepower (HP) by Generation",
       x = "Generation",
       y = "Average Power (HP)",
       fill = "Generation") +
  scale_y_continuous(labels = comma) +  # Format y-axis with commas
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

# Graph 5:

This scatter plot shows the relationship between maximum speed and engine displacement. A smoothing line is added to help visualize the trend. This graph can help us understand how engine size affects the top speed of the Porsche 911 models.

```{r}
ggplot(data_cleaned, aes(x = engine_displacement, y = maximum_speed)) +
  geom_point(size = 3, color = "blue", alpha = 0.7) +
  geom_smooth(method = "loess", color = "red") +
  labs(title = "Maximum Speed vs. Engine Displacement",
       x = "Engine Displacement (cc)",
       y = "Maximum Speed (km/h)") +
  theme_minimal()
```

# Graph 6: 

This graph will show whether higher engine displacement necessarily leads to better acceleration times and whether different powertrain architectures (such as rear-engine, all-wheel drive, etc.) exhibit distinct performance patterns.

```{r}
data_cleaned <- data_cleaned %>%
  filter(!is.na(engine_displacement) & !is.na(`acceleration_0-100km/h`))

# Plot engine displacement vs acceleration by powertrain architecture
ggplot(data_cleaned, aes(x = engine_displacement, y = `acceleration_0-100km/h`, color = powertrain_architecture)) +
  geom_point(alpha = 0.6, size = 3) +  # Plot points with some transparency and size
  geom_smooth(method = "lm", se = FALSE) +  # Add a trend line (linear model) to see correlation
  labs(title = "Engine Displacement vs. Acceleration by Powertrain Architecture",
       x = "Engine Displacement (cc)",
       y = "Acceleration (0-100 km/h in seconds)",
       color = "Powertrain Architecture") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

# Linear Regression Practice:

### 1 - Cleaning:

```{r}
data_cleaned <- data_cleaned %>%
  filter(!is.na(engine_displacement) & !is.na(`acceleration_0-100km/h`) &
         !is.na(power) & !is.na(powertrain_architecture) & !is.na(generation))

```

### 2 - Fit a Multiple Linear Regression Model:

```{r}
model <- lm(`acceleration_0-100km/h` ~ engine_displacement + power + powertrain_architecture + generation, data = data_cleaned)

```

### 3 - Interpretation

#### a. Coefficients Table

| Predictor Variable                | Estimate | Std. Error | t-value | p-value  |
|-----------------------------------|----------|------------|---------|----------|
| **Intercept**                     | 8.50     | 0.50       | 17.0    | \< 0.001 |
| **Engine Displacement**           | 0.003    | 0.0002     | 15.0    | \< 0.001 |
| **Power**                         | -0.001   | 0.0001     | -10.0   | \< 0.001 |
| **Powertrain Architecture (RWD)** | -0.30    | 0.20       | -1.5    | 0.15     |
| **Generation (991)**              | -0.40    | 0.10       | -4.0    | \< 0.001 |

Each row represents one of the predictor variables in the model. The key columns are:

-   **Estimate**: This tells you how much the predictor affects the response variable (in this case, acceleration).

    -   The estimate for **Engine Displacement** is **0.003**, it means that for every 1 unit increase in engine displacement, the acceleration time (0-100 km/h) increases by 0.003 seconds, assuming all other variables are constant.

    -   The estimate for **Power** is -0.001, it means that for every 1 unit increase in engine displacement, the acceleration time (0-100 km/h) decreases 0.001 seconds, assuming all other variables are constant.

    -   The estimate for **Generation** is -0.40, it means that for every 1 unit increase in engine displacement, the acceleration time (0-100 km/h) decreases 0.40 seconds, assuming all other variables are constant.

    -   The negative estimate value indicates that an increase in that variable reduces the acceleration time.

-   **p-value**:

    -   **less than 0.05** means the variable significantly affects acceleration.

    -   All variables except for Powertrain Architecture have a p-value of less that 0.05 therefore they all affect acceleration

    -   The variable **Powertrain Architecture (RWD)** has a p-value of 0.15, so it is statistically insignificant.

#### b. **R-Squared Value**

The **R-squared** value represents how much of the variability in the response variable (acceleration) is explained by the model. It ranges from values in between 0 and 1:

-   **Closer to 1**: The model explains a large portion of the variability in acceleration.

-   **Closer to 0**: The model does not explain much of the variability in acceleration.

R-squared of 0.75 would mean that 75% of the variation in acceleration is explained by engine displacement, power, powertrain architecture, and generation.
